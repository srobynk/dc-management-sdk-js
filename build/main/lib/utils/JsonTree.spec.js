"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ava_1 = __importDefault(require("ava"));
var JsonTree_1 = require("./JsonTree");
ava_1.default('should ignore null input', function (t) {
    var children = [];
    JsonTree_1.JsonTree.visit(null, function (value) {
        children.push(value);
    });
    t.deepEqual(children, []);
});
ava_1.default('should visit array children', function (t) {
    var children = [];
    JsonTree_1.JsonTree.visit(['a', 'b', 'c'], function (value) {
        children.push(value);
    });
    t.deepEqual(children, ['a', 'b', 'c']);
});
ava_1.default('should recursively visit array children', function (t) {
    var children = [];
    JsonTree_1.JsonTree.visit([['a'], ['b'], 'c'], function (value) {
        children.push(value);
    });
    t.deepEqual(children, ['a', ['a'], 'b', ['b'], 'c']);
});
ava_1.default('should visit object properties', function (t) {
    var children = [];
    JsonTree_1.JsonTree.visit({ a: 'a', b: 'b', c: 'c' }, function (value) {
        children.push(value);
    });
    t.deepEqual(children, ['a', 'b', 'c']);
});
ava_1.default('should recursively visit object properties', function (t) {
    var children = [];
    JsonTree_1.JsonTree.visit({ a: { a: 'a' }, b: 'b', c: 'c' }, function (value) {
        children.push(value);
    });
    t.deepEqual(children, ['a', { a: 'a' }, 'b', 'c']);
});
ava_1.default('should throw if data is self-referential', function (t) {
    var data = { a: 'a' };
    data.b = data;
    // tslint:disable-next-line
    t.throws(function () { return JsonTree_1.JsonTree.visit(data, function (value) { }); });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSnNvblRyZWUuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvdXRpbHMvSnNvblRyZWUuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDRDQUF1QjtBQUN2Qix1Q0FBc0M7QUFFdEMsYUFBSSxDQUFDLDBCQUEwQixFQUFFLFVBQUEsQ0FBQztJQUNoQyxJQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDcEIsbUJBQVEsQ0FBQyxLQUFLLENBQ1osSUFBSSxFQUNKLFVBQUMsS0FBVTtRQUNULFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsQ0FBQyxDQUNGLENBQUM7SUFDRixDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUM1QixDQUFDLENBQUMsQ0FBQztBQUVILGFBQUksQ0FBQyw2QkFBNkIsRUFBRSxVQUFBLENBQUM7SUFDbkMsSUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLG1CQUFRLENBQUMsS0FBSyxDQUNaLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFDZixVQUFDLEtBQVU7UUFDVCxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZCLENBQUMsQ0FDRixDQUFDO0lBQ0YsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDekMsQ0FBQyxDQUFDLENBQUM7QUFFSCxhQUFJLENBQUMseUNBQXlDLEVBQUUsVUFBQSxDQUFDO0lBQy9DLElBQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNwQixtQkFBUSxDQUFDLEtBQUssQ0FDWixDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsRUFDbkIsVUFBQyxLQUFVO1FBQ1QsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QixDQUFDLENBQ0YsQ0FBQztJQUNGLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN2RCxDQUFDLENBQUMsQ0FBQztBQUVILGFBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxVQUFBLENBQUM7SUFDdEMsSUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLG1CQUFRLENBQUMsS0FBSyxDQUNaLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFDMUIsVUFBQyxLQUFVO1FBQ1QsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QixDQUFDLENBQ0YsQ0FBQztJQUNGLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3pDLENBQUMsQ0FBQyxDQUFDO0FBRUgsYUFBSSxDQUFDLDRDQUE0QyxFQUFFLFVBQUEsQ0FBQztJQUNsRCxJQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDcEIsbUJBQVEsQ0FBQyxLQUFLLENBQ1osRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQ2pDLFVBQUMsS0FBVTtRQUNULFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsQ0FBQyxDQUNGLENBQUM7SUFDRixDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNyRCxDQUFDLENBQUMsQ0FBQztBQUVILGFBQUksQ0FBQywwQ0FBMEMsRUFBRSxVQUFBLENBQUM7SUFDaEQsSUFBTSxJQUFJLEdBQVEsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7SUFDN0IsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFZCwyQkFBMkI7SUFDM0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxjQUFNLE9BQUEsbUJBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFVBQUMsS0FBVSxJQUFNLENBQUMsQ0FBQyxFQUF4QyxDQUF3QyxDQUFDLENBQUM7QUFDM0QsQ0FBQyxDQUFDLENBQUMifQ==