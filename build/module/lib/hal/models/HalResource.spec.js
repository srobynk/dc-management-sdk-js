import test from 'ava';
import { AxiosHttpClient } from '../../http/AxiosHttpClient';
import { DefaultHalClient } from '../services/HalClient';
import { HalResource } from './HalResource';
// axios-mock-adaptor's typedefs are wrong preventing calling onGet with 3 args, this is a workaround
/**
 * @hidden
 */
// tslint:disable-next-line
const MockAdapter = require('axios-mock-adapter');
/**
 * @hidden
 */
const tokenProvider = {
    getToken: () => Promise.resolve({
        access_token: 'token',
        expires_in: 500,
        refresh_token: 'refresh'
    })
};
/**
 * @hidden
 */
function createMockClient() {
    const httpClient = new AxiosHttpClient({});
    const client = new DefaultHalClient('', httpClient, tokenProvider);
    const mock = new MockAdapter(httpClient.client);
    return [client, mock];
}
/**
 * @hidden
 */
class MockResource extends HalResource {
    constructor() {
        super(...arguments);
        this.related = {
            nested: () => this.fetchLinkedResource('nested', {}, MockResource),
            nestedCreate: (resource) => this.createLinkedResource('nested', {}, resource, MockResource)
        };
    }
    getMockEmbeddedResources() {
        return this.parseEmbedded('mocks', MockResource);
    }
}
test('embedded resources should be lazy parsed', t => {
    const [client, mock] = createMockClient();
    const resource = client.parse({
        _embedded: {
            mocks: [{ name: 'test' }]
        }
    }, MockResource);
    t.is(resource.getMockEmbeddedResources().length, 1);
    t.is(resource.getMockEmbeddedResources()[0].name, 'test');
});
test('missing embedded resources should return an empty list', t => {
    const resource = new MockResource({
        _embedded: {}
    });
    t.is(resource.getMockEmbeddedResources().length, 0);
});
test('input JSON should be parsed', async (t) => {
    const resource = new MockResource({
        name: 'test'
    });
    t.is(resource.name, 'test');
});
test('fetchLinkedResource should follow the resource link', async (t) => {
    const [client, mock] = createMockClient();
    const resource = client.parse({
        _links: {
            nested: {
                href: '/nested/1'
            }
        }
    }, MockResource);
    mock.onGet('/nested/1', undefined).reply(200, {
        name: 'nested 1'
    });
    const result = await resource.related.nested();
    t.is(result.name, 'nested 1');
});
test('fetchLinkedResource should reject if link is missing', async (t) => {
    const [client, mock] = createMockClient();
    const resource = client.parse({
        _links: {}
    }, MockResource);
    resource.related.nested().then(() => t.fail(), () => t.pass());
});
test('fetchLinkedResource should reject if no client is linked', async (t) => {
    const [client, mock] = createMockClient();
    const resource = new MockResource({
        _links: {}
    });
    resource.related.nested().then(() => t.fail(), () => t.pass());
});
test('createLinkedResource should follow the resource link', async (t) => {
    const [client, mock] = createMockClient();
    const resource = client.parse({
        _links: {
            nested: {
                href: '/nested/1'
            }
        }
    }, MockResource);
    mock.onPost('/nested/1', undefined).reply(200, {
        name: 'nested 1'
    });
    const result = await resource.related.nestedCreate(resource);
    t.is(result.name, 'nested 1');
});
test('createLinkedResource should reject if link is missing', async (t) => {
    const [client, mock] = createMockClient();
    const resource = client.parse({
        _links: {}
    }, MockResource);
    resource.related.nestedCreate(resource).then(() => t.fail(), () => t.pass());
});
test('createLinkedResource should reject if no client is linked', async (t) => {
    const [client, mock] = createMockClient();
    const resource = new MockResource({
        _links: {}
    });
    resource.related.nestedCreate(resource).then(() => t.fail(), () => t.pass());
});
test('toJSON should copy resource attributes', async (t) => {
    const resource = new MockResource({
        _links: {},
        name: 'name'
    });
    const json = resource.toJSON();
    t.is(json.name, 'name');
});
test('toJSON should exclude links & related', async (t) => {
    const resource = new MockResource({
        _links: {
            nested: {
                href: '/nested/1'
            }
        },
        name: 'name'
    });
    const json = resource.toJSON();
    t.deepEqual(json, { name: 'name' });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGFsUmVzb3VyY2Uuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvaGFsL21vZGVscy9IYWxSZXNvdXJjZS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLEtBQUssQ0FBQztBQUN2QixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGdCQUFnQixFQUFhLE1BQU0sdUJBQXVCLENBQUM7QUFDcEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU1QyxxR0FBcUc7QUFDckc7O0dBRUc7QUFDSCwyQkFBMkI7QUFDM0IsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFFbEQ7O0dBRUc7QUFDSCxNQUFNLGFBQWEsR0FBRztJQUNwQixRQUFRLEVBQUUsR0FBRyxFQUFFLENBQ2IsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUNkLFlBQVksRUFBRSxPQUFPO1FBQ3JCLFVBQVUsRUFBRSxHQUFHO1FBQ2YsYUFBYSxFQUFFLFNBQVM7S0FDekIsQ0FBQztDQUNMLENBQUM7QUFFRjs7R0FFRztBQUNIO0lBQ0UsTUFBTSxVQUFVLEdBQUcsSUFBSSxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0MsTUFBTSxNQUFNLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ25FLE1BQU0sSUFBSSxHQUFHLElBQUksV0FBVyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVoRCxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3hCLENBQUM7QUFFRDs7R0FFRztBQUNILGtCQUFtQixTQUFRLFdBQVc7SUFBdEM7O1FBR2tCLFlBQU8sR0FBRztZQUN4QixNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFB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