import test from 'ava';
import { ContentItem } from '../../model/ContentItem';
import { ContentGraph } from './ContentGraph';
/**
 * @hidden
 */
const FIXTURES = {
    contentA: new ContentItem({
        body: {},
        id: 'contentA',
        label: 'labelA'
    }),
    contentB: new ContentItem({
        body: {},
        id: 'contentB',
        label: 'labelB'
    }),
    contentC: new ContentItem({
        body: {
            children: [
                {
                    _meta: {
                        schema: 'http://bigcontent.io/cms/schema/v1/core#/definitions/content-link'
                    },
                    id: 'contentA'
                },
                {
                    _meta: {
                        schema: 'http://bigcontent.io/cms/schema/v1/core#/definitions/content-link'
                    },
                    id: 'contentB'
                }
            ]
        },
        id: 'contentC',
        label: 'labelC'
    })
};
test('should reject if content fails to load', async (t) => {
    const result = ContentGraph.deepCopy(['contentA'], x => Promise.reject(new Error('')), (x, y) => Promise.reject(new Error('')));
    await t.throws(() => result);
});
test('should use content item returned', async (t) => {
    const result = await ContentGraph.deepCopy(['contentA', 'contentB'], id => Promise.resolve(FIXTURES[id]), (item, body) => {
        if (item.id === 'contentA') {
            return Promise.resolve(FIXTURES.contentB);
        }
        else {
            return Promise.resolve(FIXTURES.contentA);
        }
    });
    t.deepEqual(result, {
        contentA: 'contentB',
        contentB: 'contentA'
    });
});
test('should visit content-links', async (t) => {
    const result = await ContentGraph.deepCopy(['contentC'], id => Promise.resolve(FIXTURES[id]), (item, body) => {
        return Promise.resolve(item);
    });
    t.deepEqual(result, {
        contentA: 'contentA',
        contentB: 'contentB',
        contentC: 'contentC'
    });
});
test('should rewrite content-links with the id of the copy', async (t) => {
    const expected = {
        contentA: 'contentA-copy',
        contentB: 'contentB-copy',
        contentC: 'contentC-copy'
    };
    const result = await ContentGraph.deepCopy(['contentC'], id => Promise.resolve(FIXTURES[id]), (item, body) => {
        const newItem = new ContentItem({
            body,
            id: item.id + '-copy',
            label: item.label + '-copy'
        });
        const oldLinks = ContentGraph.extractLinks(item.body);
        const newLinks = ContentGraph.extractLinks(body);
        for (let i = 0; i < oldLinks.length; i++) {
            const oldLink = oldLinks[i];
            const newLink = newLinks[i];
            if (newLink.id !== expected[oldLink.id]) {
                throw new Error('Link rewrites failed');
            }
        }
        return Promise.resolve(newItem);
    });
    t.deepEqual(result, expected);
});
test('should only process an id once', async (t) => {
    let callbacks = 0;
    const result = await ContentGraph.deepCopy(['contentA', 'contentA'], id => Promise.resolve(FIXTURES[id]), (item, body) => {
        callbacks++;
        return Promise.resolve(item);
    });
    t.is(callbacks, 1);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udGVudEdyYXBoLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvbnRlbnQvc2VydmljZXMvQ29udGVudEdyYXBoLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sS0FBSyxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFOUM7O0dBRUc7QUFDSCxNQUFNLFFBQVEsR0FBRztJQUNmLFFBQVEsRUFBRSxJQUFJLFdBQVcsQ0FBQztRQUN4QixJQUFJLEVBQUUsRUFBRTtRQUNSLEVBQUUsRUFBRSxVQUFVO1FBQ2QsS0FBSyxFQUFFLFFBQVE7S0FDaEIsQ0FBQztJQUNGLFFBQVEsRUFBRSxJQUFJLFdBQVcsQ0FBQztRQUN4QixJQUFJLEVBQUUsRUFBRTtRQUNSLEVBQUUsRUFBRSxVQUFVO1FBQ2QsS0FBSyxFQUFFLFFBQVE7S0FDaEIsQ0FBQztJQUNGLFFBQVEsRUFBRSxJQUFJLFdBQVcsQ0FBQztRQUN4QixJQUFJLEVBQUU7WUFDSixRQUFRLEVBQUU7Z0JBQ1I7b0JBQ0UsS0FBSyxFQUFFO3dCQUNMLE1BQU0sRUFDSixtRUFBbUU7cUJBQ3RFO29CQUNELEVBQUUsRUFBRSxVQUFVO2lCQUNmO2dCQUNEO29CQUNFLEtBQUssRUFBRTt3QkFDTCxNQUFNLEVBQ0osbUVBQW1FO3FCQUN0RTtvQkFDRCxFQUFFLEVBQUUsVUFBVTtpQkFDZjthQUNGO1NBQ0Y7UUFDRCxFQUFFLEVBQUUsVUFBVTtRQUNkLEtBQUssRUFBRSxRQUFRO0tBQ2hCLENBQUM7Q0FDSCxDQUFDO0FBRUYsSUFBSSxDQUFDLHdDQUF3QyxFQUFFLEtBQUssRUFBQyxDQUFDLEVBQUMsRUFBRTtJQUN2RCxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUNsQyxDQUFDLFVB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